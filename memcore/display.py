#   ____  _           _
#  |  _ \(_)___ _ __ | | __ _ _   _
#  | | | | / __| '_ \| |/ _` | | | |
#  | |_| | \__ \ |_) | | (_| | |_| |
#  |____/|_|___/ .__/|_|\__,_|\__, |
#              |_|            |___/
#
# ÁâàÊùÉÊâÄÊúâ (c) 2024  Memrix(ËÆ∞ÂøÜÊòüÊ†∏)
# Ê≠§Êñá‰ª∂Âèó Memrix(ËÆ∞ÂøÜÊòüÊ†∏) ËÆ∏ÂèØËØÅÁöÑ‰øùÊä§„ÄÇÊÇ®ÂèØ‰ª•Âú® LICENSE.md Êñá‰ª∂‰∏≠Êü•ÁúãËØ¶ÁªÜÁöÑËÆ∏ÂèØÊù°Ê¨æ„ÄÇ
#
# Copyright (c) 2024  Memrix(ËÆ∞ÂøÜÊòüÊ†∏)
# This file is licensed under the Memrix(ËÆ∞ÂøÜÊòüÊ†∏) License. See the LICENSE.md file for more details.
#

import time
import random
import asyncio
from pathlib import Path
from rich.text import Text
from rich.tree import Tree
from rich.live import Live
from memnova import const
from engine.tackle import Grapher


class Display(object):
    """
    ÁªàÁ´ØËßÜËßâ‰∫§‰∫íÊòæÁ§∫Á±ªÔºå‰∏∫ Memrix Êèê‰æõÁïåÈù¢Ê†áËØÜ„ÄÅÂêØÂä®Âä®Áîª‰∏éÁä∂ÊÄÅÊèêÁ§∫ËæìÂá∫„ÄÇ
    """

    @staticmethod
    def show_logo() -> None:
        """
        ÊòæÁ§∫ Memrix ÁöÑÈ°πÁõÆ LOGOÔºàASCII bannerÔºâÔºå‰ΩøÁî® rich Ê∏≤Êüì„ÄÇ
        """
        banner = f"""\
 __  __                     _     
|  \\/  | ___ _ __ ___  _ __(_)_  __
| |\\/| |/ _ \\ '_ ` _ \\| '__| \\ \\/ /
| |  | |  __/ | | | | | |  | |>  < 
|_|  |_|\\___|_| |_| |_|_|  |_/_/\\_\\
        """
        Grapher.console.print(f"[bold #00D7AF]{banner}")

    @staticmethod
    def show_license() -> None:
        """
        ÊòæÁ§∫ÊéàÊùÉÂ£∞ÊòéÊàñ‰ΩøÁî®ËØ¥ÊòéÔºåÂÜÖÂÆπÊù•Ëá™ const.APP_DECLARE„ÄÇ
        """
        Grapher.console.print(const.APP_DECLARE)

    @staticmethod
    def show_done() -> None:
        """
        ÊòæÁ§∫‰ªªÂä°ÂÆåÊàêÊèêÁ§∫‰ø°ÊÅØÔºà‰ΩøÁî® task_done ÊñáÊ°àÔºâ„ÄÇ
        """
        task_done = fr"""[bold #00FF88]
+----------------------------------------+
|            {const.APP_DESC} Task Done            |
+----------------------------------------+
        """
        Grapher.console.print(task_done)

    @staticmethod
    def show_exit() -> None:
        """
        ÊòæÁ§∫‰ªªÂä°ÈÄÄÂá∫ÊèêÁ§∫‰ø°ÊÅØÔºà‰ΩøÁî® task_exit ÊñáÊ°àÔºâ„ÄÇ
        """
        task_exit = fr"""[bold #FFEE55]
+----------------------------------------+
|            {const.APP_DESC} Task Exit            |
+----------------------------------------+
        """
        Grapher.console.print(task_exit)

    @staticmethod
    def show_fail() -> None:
        """
        ÊòæÁ§∫‰ªªÂä°Â§±Ë¥•ÊàñÂºÇÂ∏∏ÊèêÁ§∫Ôºà‰ΩøÁî® task_fail ÊñáÊ°àÔºâ„ÄÇ
        """
        task_fail = fr"""[bold #FF4444]
+----------------------------------------+
|            {const.APP_DESC} Task Fail            |
+----------------------------------------+
        """
        Grapher.console.print(task_fail)

    @staticmethod
    def show_animate() -> None:
        """
        Êí≠ÊîæÈ°πÁõÆÂä†ËΩΩÂêØÂä®Âä®Áîª„ÄÇ
        """
        loading_frames = [
            f"""\
            
     ~~~         ~~~        ~~~        ~~~
   /     \\     /     \\    /     \\    /     \\
  | (‚Ä¢ ‚Ä¢) |---| (‚Ä¢ ‚Ä¢) |--| (‚Ä¢ ‚Ä¢) |--| (‚Ä¢ ‚Ä¢) |
   \\_v__/_     \\__v__/    \\__v__/    \\__v__/
     |||         |||        |||        |||
     ===         ===        ===        ===    """,
            f"""\
            
     ~~~        ~~~         ~~~        ~~~
  /     \\    /     \\     /     \\    /     \\
 | (‚Ä¢ ‚Ä¢) |--| (‚Ä¢ ‚Ä¢) |---| (‚Ä¢ ‚Ä¢) |--| (‚Ä¢ ‚Ä¢) |
  \\__v__/    \\_v__/_     \\__v__/    \\__v__/
     |||         |||        |||        |||
     ===         ===        ===        ===    """,
            f"""\
            
     ~~~        ~~~        ~~~         ~~~
  /     \\    /     \\    /     \\     /     \\
 | (‚Ä¢ ‚Ä¢) |--| (‚Ä¢ ‚Ä¢) |--| (‚Ä¢ ‚Ä¢) |---| (‚Ä¢ ‚Ä¢) |
  \\__v__/    \\__v__/    \\_v__/_     \\__v__/
     |||         |||        |||        |||
     ===         ===        ===        ===    """]

        color_palettes = [
            ["#00F5FF", "#7CFC00", "#FFD700"],  # ËµõÂçöÈúìËôπ
            ["#FF69B4", "#FF1493", "#8A2BE2"],  # Ê¢¶ÂπªËÑâÂÜ≤
            ["#ADFF2F", "#00FA9A", "#20B2AA"],  # ÈáèÂ≠êÁªøÈìæ
            ["#FFA500", "#FF6347", "#DC143C"],  # ÁÜîÂ≤©ËÉΩÊ†∏
            ["#00BFFF", "#1E90FF", "#4169E1"],  # Ê∑±Êµ∑ÂºïÊìé
            ["#DDA0DD", "#BA55D3", "#9400D3"],  # Á¥´Ëâ≤Ê≥¢ÊÆµ
            ["#FFE4B5", "#FFFACD", "#FAFAD2"],  # ÊüîÂÖâÈªÑÊ≥¢
            ["#B0E0E6", "#ADD8E6", "#E0FFFF"],  # ÂÜ∞Êô∂ÊµÅ
            ["#66CDAA", "#8FBC8F", "#2E8B57"],  # ÂÜ∑Á≥ªËÑâÁªú
            ["#FFB6C1", "#FFC0CB", "#F08080"],  # Á≤âË∞ÉË∂ÖÂØº
        ]

        palette = random.choice(color_palettes)

        with Live(console=Grapher.console, refresh_per_second=30) as live:
            for _ in range(5):
                for index, i in enumerate(loading_frames):
                    live.update(
                        f"[bold {palette[index]}]{Text.from_markup(i)}"
                    )
                    time.sleep(0.2)

        Grapher.console.print(
            f"[bold #00FF87]{{ {const.APP_DESC} Wave Linking... Aligning... Done. }}"
        )
        Grapher.console.print(
            f"[bold #00FF87]{{ {const.APP_DESC} Core Initialized. }}\n"
        )

    @staticmethod
    def compile_animation() -> None:
        """
        ÊòüÊ†∏ËÑâÂÜ≤Âä®ÁîªÔºàMemCore PulseÔºâ„ÄÇ
        """
        compile_frames = [
            f"""\
            
    [ ]      [ ]      [ ]
    [ ]      [ ]      [ ]
    [ ]      [ ]      [ ]
        """,
            f"""\
            
    [‚ñ†]      [ ]      [ ]
    [ ]      [‚ñ†]      [ ]
    [ ]      [ ]      [‚ñ†]
        """,
            f"""\
            
    [‚ñ†]      [‚ñ†]      [ ]
    [‚ñ†]      [‚ñ†]      [‚ñ†]
    [ ]      [‚ñ†]      [‚ñ†]
        """,
            f"""\
            
    [‚ñ†]      [‚ñ†]      [‚ñ†]
    [‚ñ†]   CORE LINK   [‚ñ†]
    [‚ñ†]      [‚ñ†]      [‚ñ†]
        """,
            f"""\
            
    [‚óè]      [‚óè]      [‚óè]
    [‚óè]  {const.APP_DESC} BOOT  [‚óè]
    [‚óè]      [‚óè]      [‚óè]
        """
        ]

        soft_palettes = [
            # Êô¥ÈõæËìùË∞ÉÔºàMist BlueÔºâ
            ["#D0EFFF", "#B0DFF0", "#A0CFDF", "#90BFCE", "#80AFBD"],
            # Êò•È£éÁ≤âÈõæÔºàBlush BreezeÔºâ
            ["#FFE5EC", "#FFD6E0", "#FFC8D5", "#FFB8CA", "#FFA8BF"],
            # ÊüîÂÖâÊ£ÆÊûóÔºàMint ForestÔºâ
            ["#D8F3DC", "#B7E4C7", "#95D5B2", "#74C69D", "#52B788"],
        ]
        colors = random.choice(soft_palettes)

        with Live(console=Grapher.console, refresh_per_second=30) as live:
            for _ in range(6):
                for index, i in enumerate(compile_frames[:-1]):
                    live.update(
                        Text.from_markup(f"[bold {colors[index]}]{i}")
                    )
                    time.sleep(0.2)
            live.update(
                Text.from_markup(f"[bold {colors[-1]}]{compile_frames[-1]}")
            )

        Display.show_logo()
        Display.show_license()

    @staticmethod
    def build_file_tree(file_path: str) -> None:
        """
        ÊòæÁ§∫Ê†ëÁä∂Âõæ„ÄÇ
        """
        color_schemes = {
            "Ocean Breeze": ["#AFD7FF", "#87D7FF", "#5FAFD7"],  # Ê†π / ‰∏≠Èó¥ / Êñá‰ª∂
            "Forest Pulse": ["#A8FFB0", "#87D75F", "#5FAF5F"],
            "Neon Sunset": ["#FFAF87", "#FF875F", "#D75F5F"],
            "Midnight Ice": ["#C6D7FF", "#AFAFD7", "#8787AF"],
            "Cyber Mint": ["#AFFFFF", "#87FFFF", "#5FD7D7"]
        }
        file_icons = {
            "folder": "üìÅ",
            ".json": "üì¶",
            ".yaml": "üßæ",
            ".yml": "üßæ",
            ".md": "üìù",
            ".log": "üìÑ",
            ".html": "üåê",
            ".sh": "üîß",
            ".bat": "üîß",
            ".db": "üóÉÔ∏è",
            ".sqlite": "üóÉÔ∏è",
            ".zip": "üì¶",
            ".tar": "üì¶",
            "default": "üìÑ"
        }
        text_color = random.choice([
            "#8A8A8A", "#949494", "#9E9E9E", "#A8A8A8", "#B2B2B2"
        ])

        root_color, folder_color, file_color = random.choice(list(color_schemes.values()))

        choice_icon: callable = lambda x: file_icons["folder"] if (y := Path(x)).is_dir() else (
            file_icons[n] if (n := y.name.lower()) in file_icons else file_icons["default"]
        )

        parts = Path(file_path).parts

        # Ê†πËäÇÁÇπ
        root = parts[0]
        tree = Tree(
            f"[bold {text_color}]{choice_icon(root)} {root}[/]", guide_style=f"bold {root_color}"
        )
        current_path = parts[0]
        current_node = tree

        # Â§ÑÁêÜ‰∏≠Èó¥ÁöÑÊñá‰ª∂Â§π
        for part in parts[1:-1]:
            current_path = Path(current_path, part)
            current_node = current_node.add(
                f"[bold {text_color}]{choice_icon(current_path)} {part}[/]", guide_style=f"bold {folder_color}"
            )

        ext = (file := Path(parts[-1])).suffix.lower()
        current_node.add(f"[bold {file_color}]{choice_icon(ext)} {file.name}[/]")

        Grapher.console.print("\n", tree, "\n")

    @staticmethod
    async def flame_manifest() -> None:
        """
        ÂêØÂä®Âä®Áîª„ÄÇ
        """
        startup_banners = random.choice([
            "initializing memory scanner ...",
            "calibrating baseline thresholds ...",
            "activating neural sweep engine ...",
            "preparing core diagnostic grid ...",
            "linking system memory streams ...",
            "verifying test environment ...",
            "scanning system layout ...",
            "syncing memory sensors ...",
            "establishing memory context ...",
            "priming analytic subsystems ..."
        ])

        completion_banners = random.choice([
            "memory baseline captured successfully.",
            "all memory ranges verified.",
            "scan complete ‚Äî no anomalies detected.",
            "test finished with optimal memory state.",
            "system passed baseline integrity check.",
            "memory sweep concluded without error.",
            "core scan confirmed baseline signature.",
            "no memory drift detected in target range.",
            "test sequence completed successfully.",
            "diagnostic grid returned stable metrics."
        ])

        Grapher.console.print(
            f"\n[bold #5FD7FF][{const.APP_DESC}::Engine] {const.APP_DESC} {startup_banners}\n"
        )

        width, height = 30, 5
        frames, interval = 60, 0.06

        particles = ["‚ñà", "‚ñá", "‚ñì", "‚ñí", "‚ñë"]

        flame_presets = {
            "phoenix_ember": ["#FFE082", "#FFB300", "#FB8C00", "#E65100", "#BF360C"],
            "glacier_soul": ["#B3E5FC", "#4FC3F7", "#0288D1", "#01579B", "#002F6C"],
            "forest_will": ["#B9F6CA", "#69F0AE", "#00E676", "#00C853", "#1B5E20"],
            "storm_core": ["#E1BEE7", "#BA68C8", "#9C27B0", "#6A1B9A", "#4A148C"],
            "void_flare": ["#80D8FF", "#40C4FF", "#0091EA", "#263238", "#121212"],
        }

        flame_colors = flame_presets[random.choice(list(flame_presets.keys()))]

        brand = list(const.APP_DESC)

        state = [[None for _ in range(width)] for _ in range(height)]

        positions = {ch: [random.randint(0, height - 1), random.randint(0, width - 1)] for ch in brand}
        center_row, center_col = height // 2, width // 2 - len(brand) // 2
        targets = {ch: [center_row, center_col + i] for i, ch in enumerate(brand)}

        # ËÆ°ÁÆóÊúÄÂ§ßÊî∂ÊùüË∑ùÁ¶ª
        max_distance = max(
            abs(positions[ch][0] - targets[ch][0]) + abs(positions[ch][1] - targets[ch][1])
            for ch in brand
        )

        converge_start = frames - max_distance - int(width * 0.2)

        generate_fire_row: callable = lambda: [
            0 if random.random() < 0.5 else None for _ in range(width)
        ]

        fade_particle: callable = lambda x: None if x is None else (
            x + 1 if x + 1 < len(particles) else None
        )

        async def move_forward(src: list, dst: list) -> list:
            sr, sc = src
            dr, dc = dst

            if sr < dr:
                sr += 1
            elif sr > dr:
                sr -= 1

            if sc < dc:
                sc += 1
            elif sc > dc:
                sc -= 1

            return [sr, sc]

        async def render_frame() -> "Text":
            for ch in brand:
                if frame >= converge_start:
                    positions[ch] = await move_forward(positions[ch], targets[ch])
                else:
                    r, c = positions[ch]
                    r, c = r + random.choice([-1, 0, 1]), c + random.choice([-1, 0, 1])
                    positions[ch] = [max(0, min(height - 1, r)), max(0, min(width - 1, c))]

            letter_positions = {tuple(pos): ch for ch, pos in positions.items()}
            colors = ["#FF00FF", "#FF3399", "#FF6600", "#FFCC00", "#66FF66", "#00FFFF"]
            random.shuffle(colors)

            padding, lines = " " * 8, []
            for r in range(height):
                line = ""
                for c in range(width):
                    if (r, c) in letter_positions:
                        ch = letter_positions[(r, c)]
                        line += f"[bold {colors.pop()}]{ch}[/]"
                    else:
                        idx = state[r][c]
                        if idx is not None:
                            char = particles[idx]
                            color = flame_colors[idx]
                            line += f"[{color}]{char}[/]"
                        else:
                            line += " "
                lines.append(padding + line)

            return Text.from_markup("\n".join(lines))

        with Live(console=Grapher.console, refresh_per_second=int(1 / interval)) as live:
            for frame in range(frames):
                for i in range(height - 1, 0, -1):
                    for j in range(width):
                        state[i][j] = fade_particle(state[i - 1][j])
                state[0] = generate_fire_row()
                live.update(await render_frame())
                await asyncio.sleep(interval)

            await asyncio.sleep(0.2)

        Grapher.console.print(
            f"\n[bold #5FFF87][{const.APP_DESC}::Engine] {const.APP_DESC} {completion_banners}\n"
        )


if __name__ == "__main__":
    pass
